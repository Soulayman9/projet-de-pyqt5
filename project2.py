# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os.path
import subprocess
from pathlib import Path

class Ui_Widget(object):
    def setupUi(self, Widget):
        Widget.setObjectName("Terminal")
        Widget.resize(800, 600)
        
        #create file
        self.Create_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.createFile())
        self.Create_Button.setGeometry(QtCore.QRect(10, 20, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.Create_Button.setFont(font)
        self.Create_Button.setObjectName("Create_Button")
        self.Create_Path = QtWidgets.QLineEdit(Widget)
        self.Create_Path.setGeometry(QtCore.QRect(110, 20, 271, 36))
        self.Create_Path.setObjectName("Create_Path")
        
        #delete file
        self.Delete_Path = QtWidgets.QLineEdit(Widget)
        self.Delete_Path.setGeometry(QtCore.QRect(520, 20, 271, 36))
        self.Delete_Path.setObjectName("Delete_Path")
        self.Delete_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.deleteFile())
        self.Delete_Button.setGeometry(QtCore.QRect(420, 20, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.Delete_Button.setFont(font)
        self.Delete_Button.setObjectName("Delete_Button")
        
        self.label_2 = QtWidgets.QLabel(Widget)
        self.label_2.setGeometry(QtCore.QRect(420, 60, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")        
        #Rename the file 
        self.Rename_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.renameFile())
        self.Rename_Button.setGeometry(QtCore.QRect(10, 60, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.Rename_Button.setFont(font)
        self.Rename_Button.setObjectName("Rename_Button")
        self.Rename_Path_Old = QtWidgets.QLineEdit(Widget)
        self.Rename_Path_Old.setGeometry(QtCore.QRect(110, 60, 271, 36))
        self.Rename_Path_Old.setObjectName("Rename_Path_Old")
        self.Rename_Path_New = QtWidgets.QLineEdit(Widget)
        self.Rename_Path_New.setGeometry(QtCore.QRect(520, 60, 271, 36))
        self.Rename_Path_New.setObjectName("Rename_Path_New")
        
        #function fork
        self.Fork_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.fork())
        self.Fork_Button.setGeometry(QtCore.QRect(10, 100, 80, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.Fork_Button.setFont(font)
        self.Fork_Button.setObjectName("Fork_Button")

        #one pipe
        self.OnePipe_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.pipe())
        self.OnePipe_Button.setGeometry(QtCore.QRect(180, 100, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.OnePipe_Button.setFont(font)
        self.OnePipe_Button.setObjectName("OnePipe_Button")        

        #two pipe
        self.TwoPipes_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.pipe2())
        self.TwoPipes_Button.setGeometry(QtCore.QRect(360, 100, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.TwoPipes_Button.setFont(font)
        self.TwoPipes_Button.setObjectName("TwoPipes_Button")



        
        #function date
        self.date_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.date())
        self.date_Button.setGeometry(QtCore.QRect(720, 100, 80, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.date_Button.setFont(font)
        self.date_Button.setObjectName("date_Button")


        #function affiche all the file and their permussion
        self.execlp_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.execlp())
        self.execlp_Button.setGeometry(QtCore.QRect(540, 100, 80, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.execlp_Button.setFont(font)
        self.execlp_Button.setObjectName("execlp_Button")
        
        
        #this is to write where the processus will going to send 
        self.label_3 = QtWidgets.QLabel(Widget)
        self.label_3.setGeometry(QtCore.QRect(170, 150, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)  
        self.label_3.setFont(font)       
        self.label_3.setObjectName("label_3")  
        
              
        #function for sending signal to a process
        self.Signal_Value = QtWidgets.QLineEdit(Widget)
        self.Signal_Value.setGeometry(QtCore.QRect(110, 150, 51, 36))
        self.Signal_Value.setObjectName("Signal_Value")
        self.PID_Value = QtWidgets.QLineEdit(Widget)
        self.PID_Value.setGeometry(QtCore.QRect(260, 150, 51, 36))
        self.PID_Value.setObjectName("PID_Value")
        self.Signal_Button = QtWidgets.QPushButton(Widget, clicked=lambda: self.Signal())
        self.Signal_Button.setGeometry(QtCore.QRect(10, 150, 87, 36))
        font = QtGui.QFont()
        font.setBold(True)
        self.Signal_Button.setFont(font)
        self.Signal_Button.setObjectName("Signal_Button")
        
                 
                                      
        self.Console = QtWidgets.QPlainTextEdit(Widget)
        self.Console.setGeometry(QtCore.QRect(13, 220, 771, 371))
        self.Console.setObjectName("Console")

        self.retranslateUi(Widget)
        QtCore.QMetaObject.connectSlotsByName(Widget)

    def retranslateUi(self, Widget):
        _translate = QtCore.QCoreApplication.translate
        Widget.setWindowTitle(_translate("Widget", "Widget"))
        self.Create_Button.setText(_translate("Widget", "Create"))
        self.Delete_Button.setText(_translate("Widget", "Delete"))
        self.Rename_Button.setText(_translate("Widget", "Rename"))
        self.label_2.setText(_translate("Widget", "new name:"))        
        self.Fork_Button.setText(_translate("Widget", "Fork"))
        self.OnePipe_Button.setText(_translate("Widget", "Pipe1"))
        self.TwoPipes_Button.setText(_translate("Widget", "Pipe2"))    
        self.date_Button.setText(_translate("Widget", "Date"))
        self.execlp_Button.setText(_translate("Widget", "Execlp"))
        self.Signal_Button.setText(_translate("Widget", "Signal"))
        self.label_3.setText(_translate("Widget", "to process:"))

        
                                
    def createFile(self):
        path = self.Create_Path.text()
        if self.isFileExists("Create"):
            os.system("rm Create")
        command = "gcc -o Create Create.c; " + "./Create " + path
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Create"):
            os.system("rm Create")
        self.Create_Path.clear()

    def deleteFile(self):
        path = self.Delete_Path.text()
        if self.isFileExists("Delete"):
            os.system("rm Delete")
        command = "gcc -o Delete Delete.c; " + "./Delete " + path
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Delete"):
            os.system("rm Delete")
        self.Delete_Path.clear()

    def renameFile(self):
        old_path = self.Rename_Path_Old.text()
        new_path = self.Rename_Path_New.text()
        if self.isFileExists("Rename"):
            os.system("rm Rename")
        command = "gcc -o Rename Rename.c; " + "./Rename " + old_path + " " + new_path
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Rename"):
            os.system("rm Rename")
        self.Rename_Path_New.clear()
        self.Rename_Path_Old.clear()
        
    def fork(self):
        if self.isFileExists("Fork"):
            os.system("rm Fork")
        command = "gcc -o Fork Fork.c; " + "./Fork"
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Fork"):
            os.system("rm Fork")

    def pipe(self):
        if self.isFileExists("Pipe"):
            os.system("rm Pipe")
        command = "gcc -o Pipe Pipe.c; " + "./Pipe"
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Pipe"):
            os.system("rm Pipe")

    def pipe2(self):
        if self.isFileExists("Pipe2"):
            os.system("rm Pipe2")
        command = "gcc -o Pipe2 Pipe2.c; " + "./Pipe2"
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Pipe2"):
            os.system("rm Pipe2") 



    def date(self):
        if self.isFileExists("date"):
            os.system("rm date")
        command = "gcc -o date date.c; " + "./date"
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("date"):
            os.system("rm date")


            
            
    def execlp(self):
        if self.isFileExists("execlp"):
            os.system("rm execlp")
        command = "gcc -o execlp execlp.c; " + "./execlp"
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("execlp"):
            os.system("rm execlp")            
            

    def Signal(self):
        sig = self.Signal_Value.text()
        pid = self.PID_Value.text()
        if self.isFileExists("Signal"):
            os.system("rm Signal")
        command = "gcc -o Signal Signal.c; " + "./Signal " + sig + " " + pid
        s = subprocess.check_output(command, shell=True, encoding="utf8", errors="ignore")
        self.Console.setPlainText(s)
        if self.isFileExists("Signal"):
            os.system("rm Signal")
        self.Signal_Value.clear()
        self.PID_Value.clear()


        
                    

    def isFileExists(self, filepath):
        return os.path.isfile(filepath)

    def isDirectoryExists(self, dirpath):
        return os.path.isdir(dirpath)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Widget = QtWidgets.QWidget()
    ui = Ui_Widget()
    ui.setupUi(Widget)
    Widget.show()
    sys.exit(app.exec_())
